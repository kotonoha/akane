/*
 * Copyright 2012-2016 eiennohito (Tolmachev Arseny)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package windows;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>kernel32</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("kernel32") 
@Runtime(CRuntime.class) 
public class Kernel32 {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>size_t CreateNamedPipeA(char*, int, int, int, int, int, int, void*)</code><br>
	 * <i>native declaration : line 10</i>
	 */
	@Ptr 
	public static long CreateNamedPipeA(Pointer<Byte > lpName, int dwOpenMode, int dwPipeMode, int nMaxInstances, int nOutBufferSize, int nInBufferSize, int nDefaultTimeOut, Pointer<? > lpSecurityAttributes) {
		return CreateNamedPipeA(Pointer.getPeer(lpName), dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, Pointer.getPeer(lpSecurityAttributes));
	}
	@Ptr 
	protected native static long CreateNamedPipeA(@Ptr long lpName, int dwOpenMode, int dwPipeMode, int nMaxInstances, int nOutBufferSize, int nInBufferSize, int nDefaultTimeOut, @Ptr long lpSecurityAttributes);
	/**
	 * Original signature : <code>BOOL DisconnectNamedPipe(size_t)</code><br>
	 * <i>native declaration : line 21</i>
	 */
	native public static int DisconnectNamedPipe(@Ptr long hNamedPipe);
}
